const nodemailer = require('nodemailer');

// T·∫°o transporter s·ª≠ d·ª•ng SendGrid SMTP cho m·ªçi m√¥i tr∆∞·ªùng
const createTransporter = () => {
  console.log('S·ª≠ d·ª•ng c·∫•u h√¨nh SMTP SendGrid...');
  if (!process.env.SENDGRID_API_KEY) {
    console.warn('Thi·∫øu SENDGRID_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng');
  }
  return nodemailer.createTransport({
    host: 'smtp.sendgrid.net',
    port: 587,
    secure: false,
    auth: {
      user: 'apikey', // SendGrid y√™u c·∫ßu chu·ªói 'apikey' l√† username
      pass: process.env.SENDGRID_API_KEY,
    },
    tls: {
      rejectUnauthorized: false
    },
    connectionTimeout: 30000, // 30 gi√¢y
    greetingTimeout: 15000,   // 15 gi√¢y
    socketTimeout: 30000,     // 30 gi√¢y
    pool: true,
    maxConnections: 3,
    maxMessages: 50,
    rateDelta: 20000,
    rateLimit: 3
  });
};

const transporter = createTransporter();

// H√†m retry v·ªõi exponential backoff
const sendEmailWithRetry = async (emailOptions, maxRetries = 3) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`L·∫ßn th·ª≠ ${attempt}/${maxRetries} g·ª≠i email...`);
      
      // T·∫°o transporter m·ªõi cho m·ªói l·∫ßn th·ª≠ (tr√°nh connection c≈© b·ªã l·ªói)
      const currentTransporter = createTransporter();
      
      const data = await currentTransporter.sendMail(emailOptions);
      console.log(`Email ƒë√£ g·ª≠i th√†nh c√¥ng ·ªü l·∫ßn th·ª≠ ${attempt}`);
      return data;
      
    } catch (error) {
      console.error(`L·∫ßn th·ª≠ ${attempt} th·∫•t b·∫°i:`, error.message);
      
      if (attempt === maxRetries) {
        throw error; // N√©m l·ªói n·∫øu ƒë√£ th·ª≠ h·∫øt l·∫ßn
      }
      
      // Exponential backoff: ch·ªù 2^attempt gi√¢y
      const delay = Math.pow(2, attempt) * 1000;
      console.log(`Ch·ªù ${delay}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};

exports.sendOTPEmail = async (email, otpCode) => {
  try {
    console.log(`B·∫Øt ƒë·∫ßu g·ª≠i email OTP ƒë·∫øn: ${email}`);
    
    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng cho SendGrid
    if (!process.env.SENDGRID_API_KEY || !process.env.SENDGRID_SENDER_EMAIL) {
      throw new Error('Thi·∫øu c·∫•u h√¨nh SendGrid (SENDGRID_API_KEY ho·∫∑c SENDGRID_SENDER_EMAIL)');
    }

    const emailOptions = {
      from: `"${
        process.env.SENDGRID_FROM_NAME || 'My Pet'
      }" <${process.env.SENDGRID_SENDER_EMAIL}>`,
      to: email,
      subject: 'üêæ K√≠ch Ho·∫°t T√†i Kho·∫£n My Pet c·ªßa b·∫°n',
      html: `
        <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: auto; border: 1px solid #e0e0e0; border-radius: 12px; overflow: hidden; background-color: #f5f8fa;">
          <div style="background-color: #2a7eab; padding: 20px; text-align: center;">
            <img src="URL_BANNER_PETS" alt="My Pet Banner" style="width: 100%; max-height: 150px; object-fit: cover; border-radius: 12px 12px 0 0;" />
          </div>
          <div style="padding: 30px; text-align: center;">
            <img src="URL_LOGO_PETS" alt="My Pet Logo" width="80" style="margin-top: -60px; border: 4px solid #fff; border-radius: 50%; box-shadow: 0 4px 12px rgba(0,0,0,0.1); background-color: #fff;" />
            <h2 style="color: #2a7eab; margin-top: 20px;">Ch√†o m·ª´ng ƒë·∫øn v·ªõi My Pet!</h2>
            <p style="font-size: 16px; color: #444; line-height: 1.6;">
              C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i My Pet. ƒê·ªÉ ho√†n t·∫•t, vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c nh·∫≠n m·ªôt l·∫ßn (OTP) d∆∞·ªõi ƒë√¢y ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n.
            </p>
            <div style="margin: 30px 0;">
              <span style="font-size: 36px; letter-spacing: 4px; background-color: #e3f2fd; padding: 15px 30px; border-radius: 8px; display: inline-block; color: #1e5a80; font-weight: bold; border: 1px dashed #b3e5fc;">
                ${otpCode}
              </span>
            </div>
            <p style="font-size: 14px; color: #777;">
              M√£ n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.
            </p>
          </div>
          <div style="background-color: #2a7eab; padding: 15px; text-align: center; color: #fff; border-radius: 0 0 12px 12px;">
            <p style="font-size: 12px; margin: 0;">¬© 2025 My Pet. All rights reserved.</p>
            <p style="font-size: 12px; margin: 5px 0 0;">
              C·∫ßn h·ªó tr·ª£? Vui l√≤ng li√™n h·ªá: <a href="mailto:dinhquochuy.2004hl@gmail.com" style="color: #fff; text-decoration: underline;">dinhquochuy.2004hl@gmail.com</a>
            </p>
          </div>
        </div>
      `
    };
    
    const data = await sendEmailWithRetry(emailOptions);
    console.log(`Email OTP ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn ${email}:`, data.response);
    return data;
    
  } catch (error) {
    console.error(`L·ªói g·ª≠i email OTP ƒë·∫øn ${email}:`, error.message);
    throw error;
  }
};
  
// G·ª≠i email OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.sendResetPasswordEmail = async (email, otpCode) => {
  try {
    console.log(`B·∫Øt ƒë·∫ßu g·ª≠i email reset password ƒë·∫øn: ${email}`);
    
    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng cho SendGrid
    if (!process.env.SENDGRID_API_KEY || !process.env.SENDGRID_SENDER_EMAIL) {
      throw new Error('Thi·∫øu c·∫•u h√¨nh SendGrid (SENDGRID_API_KEY ho·∫∑c SENDGRID_SENDER_EMAIL)');
    }

    const emailOptions = {
      from: `"${
        process.env.SENDGRID_FROM_NAME || 'My Pet'
      }" <${process.env.SENDGRID_SENDER_EMAIL}>`,
      to: email,
      subject: 'üîë M√£ ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u My Pet',
      html: `
        <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: auto; border: 1px solid #e0e0e0; border-radius: 12px; overflow: hidden; background-color: #f5f8fa;">
          <div style="background-color: #2a7eab; padding: 20px; text-align: center;">
            <img src="https://res.cloudinary.com/dgyb5zpqr/image/upload/v1758856754/banner_s9ocek.jpg" alt="My Pet Banner" style="width: 100%; max-height: 150px; object-fit: cover; border-radius: 12px 12px 0 0;" />
          </div>
          <div style="padding: 30px; text-align: center;">
            <img src="https://res.cloudinary.com/dgyb5zpqr/image/upload/v1758856331/my-pet_logo_jeercf.jpg" alt="My Pet Logo" width="80" style="margin-top: -60px; border: 4px solid #fff; border-radius: 50%; box-shadow: 0 4px 12px rgba(0,0,0,0.1); background-color: #fff;" />
            <h2 style="color: #2a7eab; margin-top: 20px;">Y√™u C·∫ßu ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</h2>
            <p style="font-size: 16px; color: #444; line-height: 1.6;">
              Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n My Pet c·ªßa b·∫°n. Vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c nh·∫≠n m·ªôt l·∫ßn (OTP) d∆∞·ªõi ƒë√¢y ƒë·ªÉ ti·∫øp t·ª•c.
            </p>
            <div style="margin: 30px 0;">
              <span style="font-size: 36px; letter-spacing: 4px; background-color: #e3f2fd; padding: 15px 30px; border-radius: 8px; display: inline-block; color: #1e5a80; font-weight: bold; border: 1px dashed #b3e5fc;">
                ${otpCode}
              </span>
            </div>
            <p style="font-size: 14px; color: #777;">
              M√£ n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.
            </p>
          </div>
          <div style="background-color: #2a7eab; padding: 15px; text-align: center; color: #fff; border-radius: 0 0 12px 12px;">
            <p style="font-size: 12px; margin: 0;">¬© 2025 My Pet. All rights reserved.</p>
            <p style="font-size: 12px; margin: 5px 0 0;">
              C·∫ßn h·ªó tr·ª£? Vui l√≤ng li√™n h·ªá: <a href="mailto:dinhquochuy.2004hl@gmail.com" style="color: #fff; text-decoration: underline;">dinhquochuy.2004hl@gmail.com</a>
            </p>
          </div>
        </div>
      `
    };
    
    const data = await sendEmailWithRetry(emailOptions);
    console.log(`Email reset password ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn ${email}:`, data.response);
    return data;
    
  } catch (error) {
    console.error(`L·ªói g·ª≠i email reset password ƒë·∫øn ${email}:`, error.message);
    throw error;
  }
};